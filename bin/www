#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http')
const socketIO = require('socket.io')
const gracefulShutdown = require('http-graceful-shutdown')
const { logger } = require('../pipes.js')
const app = require('../app.js') // app is instance of Express

/**
 * Get port from environment and store in Express.
 */
const port = process.env.PORT || 3000
app.set('port', port)

/**
 * Create HTTP server.
 */
const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

const io = socketIO(server)
app.set('socketio', io)

/**
 * Event listener for HTTP server "error" event.
 * @param {Error} error
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.log({ level: 'error', message: bind + ' requires elevated privileges' })
      process.exit(1)
    case 'EADDRINUSE':
      logger.log({ level: 'error', message: bind + ' is already in use' })
      process.exit(1)
    default:
      throw error
  }
}

// pm2 --shutdown-with-message recieves a message to shutdown gracefully
process.on('message', function (msg) {
  if (msg === 'shutdown') {
    logger.log({ level: 'info', message: 'Closing all connections...' })
    // global.mongodb.disconnect();
    setTimeout(function () {
      logger.log({ level: 'info', message: 'Finished closing connections' })
      process.exit(0)
    }, 1500)
  }
})

// Graceful start implemented with pm2 --wait-ready
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  logger.log({ level: 'info', message: 'Listening on ' + bind })
}

// ERROR HANDLING IN EXTREME CASES!!!
// ASSUME ANY MAJOR ERROR IS CAUSED BY DATA INCONSISTENCY IN LAST DB
// ON ANY MAJOR ERROR: SIGINT, SIGTERM OR UNCAUGHTEXCEPTION: FLAG DB
// DB IS CONSIDERED ERRONOUS AND RENAMED BY (+1) TO BECOME AN ODD NUMBER
// LAST DB WILL BE DOWN-GRADED
// AND THE PREVIOUS VALID DB IS TAKEN FOR THE NEXT STARTUP UNTIL MANUAL ADMIN DEBUG

/**
 * shutdownFunction
 * @param {Number} signal
 * @return {Promise}
 */
function shutdownFunction (signal) {
  return new Promise((resolve) => {
    logger.log({ level: 'error', message: '... called signal: ' + signal })
    setTimeout(function () {
      logger.log({ level: 'error', message: '... cleanup finished' })
      resolve()
    }, 1000)
  })
}

/**
 * cleanup
 */
function finalFunction () {
  // console.log('Server gracefulls shutted down.....');
  logger.log({ level: 'error', message: 'Server gracefulls shutted down.....' })
}

gracefulShutdown(server, {
  signals: 'SIGINT SIGTERM',
  timeout: 10000, // timeout: 10 secs
  development: false, // not in dev mode
  forceExit: true, // triggers process.exit() at the end of shutdown process
  // needed operation before httpConnections are shutted down
  // preShutdown: preShutdownFunction,
  onShutdown: shutdownFunction, // shutdown function (async) -  for cleanup DB, ...
  finally: finalFunction // finally function (sync) - e.g. for logging
})

process.on('uncaughtException', function (err) {
  // handle the error safely
  logger.log({ level: 'error', message: `uncaughtException ${err}` })
  process.exit(1)
})
